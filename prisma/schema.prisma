// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email        String  @unique
  nickname     String
  image        String?
  password     String
  salt         String
  refreshToken String?

  products     Product[] @relation(name: "productOwnership")
  likeProducts Product[] @relation(name: "UserLikesProduct")
  ownArticles  Article[] @relation(name: "articleOwnership")
  likeArticles Article[] @relation(name: "UserLikesArticle")
  ownComments  Comment[]
}

model Product {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String //min 1, max 10
  description String //min 10, max 100
  price       Int //min 1
  likeCount   Int    @default(0) //min 0 

  owner         User?          @relation(name: "productOwnership", fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId       String?
  likeUsers     User[]         @relation(name: "UserLikesProduct")
  comments      Comment[]
  productTags   ProductTag[]
  productImages ProductImage[]

  @@index([createdAt])
}

model ProductTag {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tag String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model ProductImage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  originalName String
  fileName     String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Article {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title     String
  content   String
  likeCount Int    @default(0) //min 0

  owner         User?          @relation(fields: [ownerId], references: [id], name: "articleOwnership", onDelete: SetNull)
  ownerId       String?
  likeUsers     User[]         @relation(name: "UserLikesArticle")
  comments      Comment[]
  articleImages ArticleImage[]

  @@index([createdAt])
}

model ArticleImage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image String

  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String

  owner     User?    @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId   String?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?
}
